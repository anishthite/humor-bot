{"version":3,"sources":["components/FeedbackBadJoke.js","components/FeedbackNoJoke.js","components/Thanks.js","components/GeneratorModel.js","App.js","serviceWorker.js","index.js"],"names":["FeedbackBadJoke","props","state","loading","result","trigger","searchInputTimeout","setTimeout","sendfeedback","then","myresponse","console","log","triggerNextStep","this","tosend","history","steps","model","axios","create","httpsAgent","https","Agent","rejectUnauthorized","strictSSL","post","feedbackURL","response","data","catch","err","React","Component","FeedbackNoJoke","FEEDBACK_URL","Thanks","instance","feedbackurl","GeneratorModel","stopTimer","CheckIdleTime","bind","trigfunc","push","previousStep","message","makeprediction","next_step","startTimer","value","length","url","interval","window","setInterval","clearInterval","_idleSecondsCounter","defaultProps","undefined","BASE_URL","process","NODE_TLS_REJECT_UNAUTHORIZED","models","Math","floor","random","URL","id","options","label","user","component","waitAction","asMessage","delay","App","className","width","botAvatar","enableMobileAutoFocus","headerTitle","contentStyle","height","style","botDelay","userDelay","Boolean","location","hostname","match","ReactDOM","render","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.c7ff1dd3.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport {Loading} from 'react-simple-chatbot';\nimport axios from 'axios'\nimport https from 'https'\nclass FeedbackBadJoke extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {loading: true, result: <Loading />, trigger: false};\n      this.searchInputTimeout = setTimeout(() => {this.sendfeedback(props).then(\n        myresponse => {\n          console.log(myresponse);\n            this.state.result = 'Thanks for the feedback!';\n      this.props.triggerNextStep();\n      //this.refresh();\n        });\n    }, 400);\n    }\n    render() {\n      return (this.state.result);\n    }\n  \n    sendfeedback(props) {\n      var tosend = {\n        \"joketuple\" : this.props.history,\n        'feedback' : props.steps['user-feedback']['message'],\n      'model': this.props.model,\n      }\n      const instance = axios.create({\n        httpsAgent: new https.Agent({  \n          rejectUnauthorized: false,\n          strictSSL: false\n        })\n      });\n  \n      return instance.post(this.props.feedbackURL,tosend)\n      .then(function(response) {\n        console.log(response.data);\n        this.props.history = [];\n        return response.data;\n      })\n      .catch(err=>console.log(err))\n    }\n    //refresh() {\n    //  window.location.replace(myURL);\n    //}\n}\n\nexport default FeedbackBadJoke;","import React from 'react';\nimport '../App.css';\nimport {Loading} from 'react-simple-chatbot';\nimport axios from 'axios'\nimport https from 'https'\nclass FeedbackNoJoke extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {loading: true, result: <Loading />, trigger: false};\n      this.searchInputTimeout = setTimeout(() => {this.sendfeedback(props).then(\n        myresponse => {\n          console.log(myresponse);\n            this.state.result = 'Thanks for the feedback!';\n      this.props.triggerNextStep();\n      //this.refresh();\n        });\n    }, 400);\n    }\n    render() {\n      return (this.state.result);\n    }\n  \n    sendfeedback(props) {\n      var tosend = {\n        \"joketuple\" : this.props.history,\n        'feedback' : props.steps['user-nojoke']['message'],\n      'model': this.props.model,\n      }\n      const instance = axios.create({\n        httpsAgent: new https.Agent({  \n          rejectUnauthorized: false,\n          strictSSL: false\n        })\n      });\n  \n  \n      return instance.post(this.props.FEEDBACK_URL,tosend)\n      .then(function(response) {\n        console.log(response.data);\n        this.props.history = [];\n        return response.data;\n      })\n      .catch(err=>console.log(err))\n    }\n    //refresh() {\n    //  window.location.replace(myURL);\n    //}\n  }\n  export default FeedbackNoJoke;","import React from 'react';\nimport '../App.css';\nimport {Loading} from 'react-simple-chatbot';\nimport axios from 'axios'\nimport https from 'https'\nclass Thanks extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {loading: true, result: <Loading />, trigger: false};\n      this.searchInputTimeout = setTimeout(() => {this.sendfeedback(props).then(\n        myresponse => {\n          console.log(myresponse);\n            if (props.steps['goodoptions']['message']=='😍') {\n                this.state.result = '(~˘▾˘)~ That’s great! Glad you liked it!';\n            }\n            else{\n                console.log(props.steps['goodoptions']['message'])\n                this.state.result = 'I’ll try harder next time… ᕙ(⇀‸↼‶)ᕗ';\n            }\n      this.props.triggerNextStep();\n      //this.refresh();\n        });\n    }, 400);\n    }\n    render() {\n      return (this.state.result);\n    }\n  \n    sendfeedback(props) {\n      var tosend = {\n        \"joketuple\" : this.props.history,\n        'feedback' :props.steps['goodoptions']['message'],\n        'model' : this.props.model\n      }\n      const instance = axios.create({\n        httpsAgent: new https.Agent({  \n          rejectUnauthorized: false,\n          strictSSL: false\n        })\n      });\n  \tconsole.log('feedback');\n\tconsole.log(this.props.feedbackurl);\n      return instance.post(this.props.feedbackurl,tosend)\n      .then(function(response) {\n        console.log(response.data);\n        //this.props.history = [];\n        return response.data;\n      })\n      .catch(err=>console.log(err))\n    }\n    //refresh() {\n    //  window.location.replace(myURL);\n    //}\n  }\nexport default Thanks;\n","import React from 'react';\nimport '../App.css';\nimport {Loading} from 'react-simple-chatbot';\nimport axios from 'axios'\nimport https from 'https'\nimport PropTypes from 'prop-types';\nvar IDLE_TIMEOUT = 30;\nclass GeneratorModel extends React.Component{\n    constructor(props) {\n      super(props);\n      this.stopTimer();\n      this.CheckIdleTime=this.CheckIdleTime.bind(this);\n      this.state = {loading: true, result: <Loading />, trigger: false, trigfunc: this.props.triggerNextStep};\n      this.props.history.push(props.previousStep.message);\n      this.searchInputTimeout = setTimeout(() => {this.makeprediction().then(\n        myresponse => {\n        this.props.history.push(myresponse);\n        var next_step;\n        if (myresponse == \"Sorry I don't have a joke about that right now\"){\n      this.state.result = 'There was no joke returned. Can you please suggest a joke for us? If you can\\'t think of one please type no' \n      next_step = 'user-nojoke';\n        } else {\n          this.state.result = myresponse;\n            next_step = 'quality';\n        }\n        this.startTimer();\n        console.log('here')\n        this.props.triggerNextStep({ value: next_step , trigger: next_step} );\n      });\n    }, 400);\n    }\n  \n    makeprediction(){\n      var tosend = {\n        \"history\" : this.props.history[this.props.history.length-1],\n      }\n      const instance = axios.create({\n        httpsAgent: new https.Agent({  \n          rejectUnauthorized: false,\n          strictSSL: false\n        })\n      });\n\tconsole.log('IRL'); \n\tconsole.log(this.props.url);\n      return instance.post(this.props.url,tosend)\n      .then(function(response) {\n        return response.data;\n      })\n      .catch(err=>console.log(err))\n    }\n  \n    render() {\n      return(this.state.result);\n    }\n  startTimer() {\n    this.interval = window.setInterval(this.CheckIdleTime, 1000);\n  }\n  \n  stopTimer() {\n    window.clearInterval(this.interval);\n  }\n  CheckIdleTime() {\n      this._idleSecondsCounter++;\n      //console.log(_idleSecondsCounter)\n      if (this._idleSecondsCounter >= IDLE_TIMEOUT) {\n        //this.props.triggerNextStep({value : 'yes', trigger: 'start1'});\n        this._idleSecondsCounter = 0;\n      }\n  }\n  }\n\n  GeneratorModel.propTypes = {\n    previousStep: PropTypes.object,\n    triggerNextStep: PropTypes.func,\n  };\n  \n  GeneratorModel.defaultProps = {\n    steps: undefined,\n    triggerNextStep: undefined,\n  };\nexport default GeneratorModel;\n","import React from 'react';\nimport './App.css';\n//import PropTypes from 'prop-types';\nimport ChatBot from 'react-simple-chatbot';\n//import axios from 'axios'\n//import https from 'https'\n//import Button from '@material-ui/core/Button';\n//import Typography from '@material-ui/core/Typography';\nimport FeedbackBadJoke from './components/FeedbackBadJoke.js'\nimport FeedbackNoJoke from './components/FeedbackNoJoke.js'\nimport Thanks from './components/Thanks.js'\nimport GeneratorModel from './components/GeneratorModel.js'\n\nconst BASE_URL = \"https://greetez.com:4444\" \nconst FEEDBACK_URL = BASE_URL + \"/feedback\"\n//const myURL = \"https://greetez.com:3000\"\n\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n//const uuidv4 = require('uuid/v4');\n//const myuuid = uuidv4();\n\n// var IDLE_TIMEOUT = 30; //seconds\n// var _idleSecondsCounter = 0;\n// var interval;\n// window.onkeydown = function() {\n//   _idleSecondsCounter = 0;\n// };\n// window.onkeyup = function() {\n//   _idleSecondsCounter = 0;\n// };\n// window.onkeypress = function() {\n//   _idleSecondsCounter = 0;\n// };\n// window.oninput = function() {\n//   _idleSecondsCounter = 0;\n// };\n\nvar history = [];\n\n//pick a model\nconst models = [\"/generate_gpt2_ind\", \"/generate_dialogpt2\", \"/generate_pipeline\"];\nconst model = models[Math.floor(Math.random()*models.length)];\nconst URL = BASE_URL + model;\nconsole.log(FEEDBACK_URL);\n\nconsole.log(model);\n//var start = ['What are you doing today?', 'What are you doing right now?', 'What\\'s up?', 'How are you today?', 'What do you like to do?', 'How are you?']\n\n//class FeedbackButton extends React.Component {\n//  constructor(props) {\n//    super(props)\n//  }\n//  render() {\n//    return (\n//      <Button variant=\"contained\" size=\"small\" color=\"default\" onClick={() => \n//        { \n//            window.clearInterval(interval); \n//            this.props.triggerNextStep({value : 'yes', trigger: 'feedback-form'});\n//      }}>\n//              Wrong Response? Click Me!\n//      </Button>\n//    );\n//  }\n//}\n//\n//class NewTopic extends React.Component {\n//  constructor(props) {\n//    super(props);\n//    this.state = {result: <Loading />};\n//    this.state.result = this.getRandomStart();\n//    this.props.triggerNextStep();\n//  }\n//  getRandomInt(max) {\n//    return Math.floor(Math.random() * Math.floor(max));\n//  }\n//  getRandomStart(){\n//    const message = start[this.getRandomInt(start.length)];\n//    history[history.length -1] = history[history.length -1] + ' ' + message;\n//    //console.log('message');\n//    return(message);\n//  }\n//  render() {\n//    return(this.state.result)\n//  }\n//}\n\n\n//class Interfacer extends React.Component{\n//  constructor(props) {\n//    super(props);\n//    this.stopTimer();\n//    this.CheckIdleTime=this.CheckIdleTime.bind(this);\n//    this.state = {loading: true, result: <Loading />, trigger: false, trigfunc: this.props.triggerNextStep};\n//    history.push(props.previousStep.message);\n//    this.searchInputTimeout = setTimeout(() => {this.makeprediction().then(\n//      myresponse => {\n//      this.state.result = myresponse;\n//      history.push(myresponse);\n//      this.startTimer();\n//      this.props.triggerNextStep();\n//    });\n//  }, 400);\n//  }\n//\n//  makeprediction(){\n//    var tosend = {\n//      \"history\" : history.slice(-(2*10+1)),\n//      \"device\" : \"cpu\",\n//      \"top_p\" : 0.0,\n//      \"top_k\" : 10,\n//      \"temperature\" : 1,\n//      \"id\" : myuuid\n//    }\n//    const instance = axios.create({\n//      httpsAgent: new https.Agent({  \n//        rejectUnauthorized: false,\n//        strictSSL: false\n//      })\n//    });\n//\n//    return instance.post(URL,tosend)\n//    .then(function(response) {\n//      return response.data;\n//    })\n//    .catch(err=>console.log(err))\n//  }\n//\n//  render() {\n//    return(this.state.result);\n//  }\n//startTimer() {\n//  interval = window.setInterval(this.CheckIdleTime, 1000);\n//}\n//\n//stopTimer() {\n//  window.clearInterval(interval);\n//}\n//CheckIdleTime() {\n//    _idleSecondsCounter++;\n//    //console.log(_idleSecondsCounter)\n//    if (_idleSecondsCounter >= IDLE_TIMEOUT) {\n//      //this.props.triggerNextStep({value : 'yes', trigger: 'start1'});\n//      _idleSecondsCounter = 0;\n//    }\n//}\n//}\n\n\n//Interfacer.propTypes = {\n//  previousStep: PropTypes.object,\n//  triggerNextStep: PropTypes.func,\n//};\n//\n//Interfacer.defaultProps = {\n//  steps: undefined,\n//  triggerNextStep: undefined,\n//};\n\nvar steps = [\n {\n    id: 'startemoji',\n    message: 'Hey there! This is Eddie  (•◡•) /',\n    trigger: 'startemoji2'\n  },\n {\n    id: 'startemoji2',\n\tmessage: 'Hope you are having a great day! How would you rate your mood today?',\n     \ttrigger: 'emoji-buttons'\n \n \n },\n {\n  id: 'emoji-buttons',\n  options:[\n    {value: '🤯', label: '🤯',trigger:'tellme'},\n    {value: '😱', label: '😱',trigger:'tellme'},\n    {value: '😭', label: '😭',trigger:'tellme'},\n    {value: '🙁', label: '🙁',trigger:'tellme'},\n    {value: '😞', label: '😞',trigger:'tellme'},\n    {value: '😊', label: '😊',trigger:'tellme'},\n    {value: '😆', label: '😆',trigger:'tellme'},\n    {value: '🙃', label: '🙃',trigger:'tellme'},\n    {value: '😕', label: '😕',trigger:'tellme'}\n  ]\n},\n\n  {\n    id: 'tellme',\n    message: 'Tell me what you want to do today (づ｡◕‿‿◕｡)づ',\n    trigger: 'task_options',\n  },  \n  {\n    id: 'task_options',\n     options:[\n      {value: 'game', label: 'Play a game 🎮',trigger:'jokestart'},\n      {value: 'joke', label: 'Give me a joke 🤣',trigger:'jokestart'},\n      {value: 'judge', label: 'Judge my joke ⚖️',trigger:'jokestart'}\n    ]\n  },\n  { id: 'jokestart',\n    message: 'Alright! Just pick a topic for me! ヾ(⌐■_■)ノ',\n    trigger: 'topicoptions'\t  \n  },\n  {\n    id: 'topicoptions',\n    options: [\n      {value: 'music', label: 'Music 🎵',trigger:'custom'},\n      {value: 'sports', label: 'Sports 🏀',trigger:'custom'},\n      {value: 'school', label: 'School 📝',trigger:'custom'},\n      {value: 'covid', label: 'COVID 🤢',trigger:'custom'},\n      {value: 'random', label: 'Random',trigger:'custom'},\n      {value: 'custom', label: 'Custom',trigger:'custom'}\n    ]\n  },\n  {\n   id: 'custom',\n   message: 'What’s your choice?',\n   trigger: 'user'\t  \n  },\n  {\n    id: 'user',\n    user: true,\n    trigger: 'message-returner',\n  },\n  {\n    id: 'message-returner',\n    component: <GeneratorModel history={history} model={model} url={URL}/>,\n   // trigger: 'quality',\n    waitAction: true,\n    asMessage: true\n  },\n  {\n    id: 'quality',\n    message: 'Did you like the joke?? \\ (•◡•) /',\n    trigger: 'goodoptions'\t  \n  }, \n  {\n    id: 'goodoptions',\n    options:[\n\t    {value: 'good', label: '😍',trigger:'thanks'},\n\t    {value: 'bad', label: '😩',trigger:'thanks'}\n    ],\t  \n  },\n  {\n    id: 'thanks',\n    component: <Thanks history={history} model={model} feedbackurl={FEEDBACK_URL} />,\n    asMessage: true,\n    waitAction: true,\n    trigger: 'anotherjoke'\n  },\n\n  {\n    id: 'anotherjoke',\n    message:'Do you want me to make more jokes? Or do you want to try something else?',\n    trigger: 'anotherjokeoptions'\n  },\n  {\n    id: 'anotherjokeoptions',\n    options:[\n\t    {value: 'jokestart', label: 'Another joke',trigger:'jokestart'},\n\t    {value: 'no', label: 'Something Else',trigger:'tellme'}\n    ]\n  },\n\n\n  //{\n  //  id: 'start0',\n  //  message: 'Hello there! Please type a keyword and I will write a joke based on it',\n  //  trigger: 'user',\n  //},\n  {\n    id: 'continue new',\n    message: 'Please type another keyword and I will write a joke based on it',\n    trigger: 'user',\n  },\n//  {\n//    id: 'start1',\n//    component: <NewTopic />,\n//    asMessage: true,\n//    waitAction: true,\n//    trigger: 'user',\n//  },\n {\n    id: 'user-nojoke',\n    user: true,\n    trigger: 'feedback-nojoke',\n  },\n  {\n    id: 'feedback-nojoke',\n    component: <FeedbackNoJoke history={history} model={model} feedbackurl={FEEDBACK_URL}/>,\n    asMessage: true,\n    waitAction: true,\n    trigger: 'continue new'\n  },\n  {\n    id: 'feedback-badjoke',\n    component: <FeedbackBadJoke history={history} model={model} feedbackurl={FEEDBACK_URL}/>,\n    asMessage: true,\n    waitAction: true,\n    trigger: 'continue new'\n  },\n  {\n    id: 'feedback-form',\n    message: 'Please tell me a better joke (hit enter if you can\\'t think of one).',\n    trigger: 'user-feedback'\n  },\n  {\n    id: 'user-feedback',\n    user: true,\n    trigger: 'feedback-badjoke'\n  },\n   {\n    id: 'thanks-message',\n    delay: 1500,\n    message: 'Thanks!',\n    trigger: 'thanks'\n   }\n];\n\nfunction App() {\n  return (\n     <div className=\"App\">\n\t<div>\n      <ChatBot width=\"100%\" botAvatar='profile.png' enableMobileAutoFocus='true' steps={steps} headerTitle=\"Humor Generator\" contentStyle={{ height: '86vh' }} style={{ height: '100%' }} botDelay={0} userDelay={50} />\n      </div>\n     </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'styled-components';\n\nconst theme =  {\n    background: '#f5f8fb',\n    fontFamily: 'Helvetica Neue',\n    headerBgColor: '#2c9c91',\n    headerFontColor: '#fff',\n    headerFontSize: '30px',\n    botBubbleColor: '#2c9c91',\n    // botFontSize: '100px',\n    botFontColor: '#fff',\n    userBubbleColor: '#fff',\n    userFontColor: '#4a4a4a',\n}\n\n\n\n\nReactDOM.render(\n\t<ThemeProvider theme={theme}>\n    \t<App />\n    </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}